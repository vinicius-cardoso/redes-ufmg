# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import sala_pb2 as sala__pb2


class SalaStub(object):
    """Definição do serviço para o servidor de bate-papo
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.registra_entrada = channel.unary_unary(
                '/sala.Sala/registra_entrada',
                request_serializer=sala__pb2.RegistraEntradaRequest.SerializeToString,
                response_deserializer=sala__pb2.RegistraResponse.FromString,
                )
        self.registra_saida = channel.unary_unary(
                '/sala.Sala/registra_saida',
                request_serializer=sala__pb2.RegistraSaidaRequest.SerializeToString,
                response_deserializer=sala__pb2.RegistraResponse.FromString,
                )
        self.lista = channel.unary_unary(
                '/sala.Sala/lista',
                request_serializer=sala__pb2.Empty.SerializeToString,
                response_deserializer=sala__pb2.UserList.FromString,
                )
        self.finaliza_registro = channel.unary_unary(
                '/sala.Sala/finaliza_registro',
                request_serializer=sala__pb2.Empty.SerializeToString,
                response_deserializer=sala__pb2.TerminaResponse.FromString,
                )
        self.termina = channel.unary_unary(
                '/sala.Sala/termina',
                request_serializer=sala__pb2.Empty.SerializeToString,
                response_deserializer=sala__pb2.TerminaResponse.FromString,
                )
        self.envia = channel.unary_unary(
                '/sala.Sala/envia',
                request_serializer=sala__pb2.EnviaRequest.SerializeToString,
                response_deserializer=sala__pb2.EnviaResponse.FromString,
                )


class SalaServicer(object):
    """Definição do serviço para o servidor de bate-papo
    """

    def registra_entrada(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registra_saida(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def lista(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def finaliza_registro(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def termina(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def envia(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SalaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'registra_entrada': grpc.unary_unary_rpc_method_handler(
                    servicer.registra_entrada,
                    request_deserializer=sala__pb2.RegistraEntradaRequest.FromString,
                    response_serializer=sala__pb2.RegistraResponse.SerializeToString,
            ),
            'registra_saida': grpc.unary_unary_rpc_method_handler(
                    servicer.registra_saida,
                    request_deserializer=sala__pb2.RegistraSaidaRequest.FromString,
                    response_serializer=sala__pb2.RegistraResponse.SerializeToString,
            ),
            'lista': grpc.unary_unary_rpc_method_handler(
                    servicer.lista,
                    request_deserializer=sala__pb2.Empty.FromString,
                    response_serializer=sala__pb2.UserList.SerializeToString,
            ),
            'finaliza_registro': grpc.unary_unary_rpc_method_handler(
                    servicer.finaliza_registro,
                    request_deserializer=sala__pb2.Empty.FromString,
                    response_serializer=sala__pb2.TerminaResponse.SerializeToString,
            ),
            'termina': grpc.unary_unary_rpc_method_handler(
                    servicer.termina,
                    request_deserializer=sala__pb2.Empty.FromString,
                    response_serializer=sala__pb2.TerminaResponse.SerializeToString,
            ),
            'envia': grpc.unary_unary_rpc_method_handler(
                    servicer.envia,
                    request_deserializer=sala__pb2.EnviaRequest.FromString,
                    response_serializer=sala__pb2.EnviaResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sala.Sala', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Sala(object):
    """Definição do serviço para o servidor de bate-papo
    """

    @staticmethod
    def registra_entrada(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sala.Sala/registra_entrada',
            sala__pb2.RegistraEntradaRequest.SerializeToString,
            sala__pb2.RegistraResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registra_saida(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sala.Sala/registra_saida',
            sala__pb2.RegistraSaidaRequest.SerializeToString,
            sala__pb2.RegistraResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def lista(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sala.Sala/lista',
            sala__pb2.Empty.SerializeToString,
            sala__pb2.UserList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def finaliza_registro(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sala.Sala/finaliza_registro',
            sala__pb2.Empty.SerializeToString,
            sala__pb2.TerminaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def termina(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sala.Sala/termina',
            sala__pb2.Empty.SerializeToString,
            sala__pb2.TerminaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def envia(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sala.Sala/envia',
            sala__pb2.EnviaRequest.SerializeToString,
            sala__pb2.EnviaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
